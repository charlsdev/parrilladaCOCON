      <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css" type="text/css">
      <link rel="stylesheet" href="/boxicons/boxicons.min.css" type="text/css">
      <link rel="stylesheet" href="/sweetalert2/sweetalert2.min.css" type="text/css">
      <link rel="stylesheet" href="/toastJS/jquery.toast.min.css" type="text/css">

      <link rel="stylesheet" href="/dataTables/dataTable.min.css" type="text/css"/>
      <link rel="stylesheet" href="/dataTables/datatables.min.css" type="text/css"/>
      <link rel="stylesheet" href="/dataTables/theme/dataTables.bootstrap4.min.css" type="text/css"/>

      <link rel="stylesheet" href="/select2/select2.min.css" type="text/css">
      <link rel="stylesheet" href="/select2/select2-bootstrap.min.css" type="text/css">

      <link rel="stylesheet" href="/css/navbar.min.css" type="text/css">
      <link rel="stylesheet" href="/css/letra.min.css" type="text/css">
      <link rel="stylesheet" href="/css/products.min.css" type="text/css">
      <link rel="stylesheet" href="/css/modal.min.css" type="text/css">

   </head>

	<body>
      {{> loader}}
      {{> navbarC}}

      <div class="contentView">
         <div class="container">
            <div class="row">
               <div class="col-md-12 text-center">
                  <div class="lettersTittle">
                     <span>P</span>
                     <span>L</span>
                     <span>A</span>
                     <span>T</span>
                     <span>O</span>
                     <span>S</span>
                  </div>
               </div>
            </div>

            <div class="row mb-4">
               <div class="col-md-12">
                  <button type="button" class="btnGeneral btnRModal" onclick="openModal();">
                     <i class='bx bx-add-to-queue bx-tada' ></i> Añadir
                  </button>
               </div>
            </div>

            <div class="row">
               <div class="col-md-12">
                  <table id="listPlatos" class="table is-striped table-striped table-bordered table-sm">
                     <thead class="table-primary">
                        <tr>
                           <th nowrap scope="col">Categoría</th>
                           <th scope="col">Tipo</th>
                           <th nowrap scope="col">Acompañado</th>
                           <th scope="col">Precio</th>
                           <th scope="col">Estado</th>
                           <th nowrap scope="col">Acciones</th>
                        </tr>
                     </thead>

                     <tfoot>
                        <tr>
                           <th>Categoría</th>
                           <th>Tipo</th>
                           <th></th>
                           <th></th>
                           <th>Estado</th>
                           <th></th>
                        </tr>
                     </tfoot>
                     
                  </table>
               </div>
            </div>

         </div>
      </div>

      <br>

      <script src="/JQuery/jquery.min.js"></script>
      <script src="/js/popper.min.js"></script>
      <script src="/bootstrap/js/bootstrap.min.js"></script>
      <script src="/sweetalert2/sweetalert2.min.js"></script>
      <script src="/imaskJS/imask.min.js"></script>
      <script src="/toastJS/jquery.toast.min.js"></script>

      <script src="/dataTables/jquery.dataTables.min.js"></script>
      <script src="/dataTables/datatables.min.js"></script>
      <script src="/dataTables/theme/dataTables.bootstrap4.min.js"></script>

      <script src="/select2/select2.min.js"></script>

      <script src="/js/navbar.min.js"></script>

      {{!-- Modal Products --}}
      <div class="modal fade" id="modalProducts" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
         <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
               <div class="modal-header modalHeader">
                  {{!-- Header del Modal --}}
               </div>

               <div class="modal-body body__modal" style="padding: 0 1rem; !important">
                  <div class="row mt-3 mb-3">
                     <div class="form-group col-md-12">
                        <label for="" class="required">Categoría</label>
                        <select style="width: 100%" class="form-control" id="categoria" name="categoria" >
                           {{!-- Data --}}
                        </select>
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Tipo</label>
                        <input type="text" class="form-control" id="tipoPlato" name="tipoPlato" placeholder="Ingrese el tipo de presa: Ej. Pollo" >
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="">Acompañado con</label>
                        <textarea class="form-control textarea" name="acompañadoPlato" id="acompañadoPlato" placeholder="Escribir el nombre del plato principal..." required></textarea>
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Precio</label>
                        <input type="text" class="form-control" id="precioPlato" name="precioPlato" placeholder="Ingreses el precio del plato: Ej. 4,50" >
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Estado</label>
                        <select class="form-control" id="estado" name="estado">
                           <option class="opt" value="" selected disabled>Seleccionar...</option>
                           <option value="Stock">Stock</option>
                           <option value="Sin Stock">Sin Stock</option>
                           <option value="Not Sale">Not Sale</option>
                        </select>
                     </div>
                  </div>
                  
               </div>

               <div class="modal-footer modalFooter">
                  {{!-- Footer del Modal --}}
               </div>
               
            </div>
         </div>
      </div>

      <script src="/js/validationsFront.min.js"></script>

      <script>
         {{> notifications}}

         const textarea = document.querySelector("textarea");
         textarea.addEventListener("keyup", e => {
            textarea.style.height = "35px";
            let scHeight = e.target.scrollHeight;
            textarea.style.height = `${scHeight}px`;
         });

         $(document).ready(function() {
            listPlatos = $('#listPlatos').DataTable({
               destroy: true,
               "ajax": {
                  "url": '/c/allPlatos',
                  "dataSrc":""
               },
               "columns": [
                  {"data": null,
                        render: function ( data, type, row ) {
                           return row._idCategoría.nomCategoria;
                        }
                  },
                  {"data": null,
                        render: function ( data, type, row ) {
                           return row.nomPlato;
                        }
                  },
                  {"data": null,
                        render: function ( data, type, row ) {
                           return result = (row.acompañado) ? row.acompañado : '';
                        }
                  },
                  {"data": null,
                        render: function ( data, type, row ) {
                           return row.precio;
                        }
                  },
                  {"data": null,
                        render: function ( data, type, row ) {
                           if(row.estado === 'Stock') { 
                              result = '<span class="mode badge badge-pill badge-success">Stock</span>' 
                           }
                           
                           if(row.estado === 'Sin Stock') { 
                              result = '<span class="mode badge badge-pill badge-danger">Sin Stock</span>' 
                           }
                           
                           if(row.estado === 'Not Sale') { 
                              result = '<span class="mode badge badge-pill badge-dark">Not Sale</span>' 
                           }

                           return result;
                        }
                  },
                  
                  {"data": null,
                        render: function ( data, type, row ) {
                           return `<button type="button" class="btnPoint btn btn-sm dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="false" aria-expanded="false"> <i class='bx bx-dots-vertical ' ></i> </button> 
                           <div class="dropdown-menu 1 menuD"> 
                              <a class="dropdown-item" onclick="editPlato('${row._id}')"> 
                                 <i class='bx bx-edit-alt bx-tada' ></i>
                                 Editar 
                              </a>
                              <a class="dropdown-item" onclick="deletePlato('${row._id}')"> 
                                 <i class='bx bx-trash bx-tada' ></i>
                                 Eliminar 
                              </a>
                           </div>`;
                        }
                  },
               ],
               responsive: true,
               language: idioma,
               initComplete: function () {
                  this.api()
                     .columns([0, 1, 4])
                     .every(function (i) {
                        let arrayCat = [];
                        let arrayTip = [];
                        let arrayEst = [];

                        var column = this;
                        
                        var select = $('<select class="form-control form-control-sm"><option value=""></option></select>')
                           .appendTo($(column.footer()).empty())
                           .on('change', function () {
                              var val = $.fn.dataTable.util.escapeRegex($(this).val());

                              column.search(val ? '^' + val + '$' : '', true, false).draw();
                           });

                        column
                           .data()
                           .unique()
                           .sort()
                           .each(function (d, j) {
                              // La D contiene el JSON de la API
                              if (i == 0 && !arrayCat.includes(d._idCategoría.nomCategoria)) {
                                 arrayCat.push(d._idCategoría.nomCategoria);
                                 select.append('<option value="' + d._idCategoría.nomCategoria + '">' + d._idCategoría.nomCategoria + '</option>');
                              }

                              if (i == 1&& !arrayTip.includes(d.nomPlato)) {
                                 arrayTip.push(d.nomPlato);
                                 select.append('<option value="' + d.nomPlato + '">' + d.nomPlato + '</option>');
                              }
                              
                              if (i == 4 && !arrayEst.includes(d.estado)) {
                                 arrayEst.push(d.estado);
                                 select.append('<option value="' + d.estado + '">' + d.estado + '</option>');
                              }
                           });
                     });

               }

            });

         });

         var idioma = {
            "sProcessing":     "Procesando...",
            "sLengthMenu":     "Mostrar _MENU_ registros",
            "sZeroRecords":    "No se encontraron resultados",
            "sEmptyTable":     "Ningún dato disponible en esta tabla =(",
            "sInfo":           "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
            "sInfoEmpty":      "Mostrando registros del 0 al 0 de un total de 0 registros",
            "sInfoFiltered":   "(filtrado de un total de _MAX_ registros)",
            "sInfoPostFix":    "",
            "sSearch":         "Buscar:",
            "sUrl":            "",
            "sInfoThousands":  ",",
            "sLoadingRecords": "Cargando...",
            "oPaginate": {
               "sFirst":    "Primero",
               "sLast":     "Último",
               "sNext":     "Siguiente",
               "sPrevious": "Anterior"
            },
            "oAria": {
               "sSortAscending":  ": Activar para ordenar la columna de manera ascendente",
               "sSortDescending": ": Activar para ordenar la columna de manera descendente"
            },
            "buttons": {
               "copy": "Copiar",
               "colvis": "Visibilidad"

            }
         }

         const dataCategoria = () => {
            $.ajax({
               url: "/c/allCategorias",
               type: "GET",
               datatype: "json",
            })
            .done(function(res) {
               document.getElementById('categoria').innerHTML = `<option></option>`;

               if(res.length > 0) {
                  res.forEach(data => {
                     document.getElementById('categoria').innerHTML += `
                           <option value="${data._id}">
                              ${data.nomCategoria}
                           </option>
                        `;
                  });
               }
            })
            .fail(function() {
               console.log("Error");
            });
         }
         
         const openModal = () => {
            document.querySelector('.modalHeader').innerHTML = `
                  <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                     Nuevo Producto
                  </h5>`;

            document.querySelector('.modalFooter').innerHTML = `
                  <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                  <button type="button" class="btn__Send" onclick="savePlato();">Guardar</button>`;
            
            $('#categoria').val('').trigger('change');
            $('#tipoPlato').val('');
            $('#acompañadoPlato').val('');
            $('#precioPlato').val('');
            $('#estado').val('').trigger('change');

            dataCategoria();
            $('#categoria').select2({
               dropdownParent: $("#modalProducts"),
               theme: "bootstrap",
               placeholder: "Seleccionar...",
               allowClear: true
            });

            $("#modalProducts").modal("show");
         }

         const savePlato = () => {
            categoria = $.trim($('#categoria').val());
            tipoPlato = $.trim($('#tipoPlato').val());
            acompañadoPlato = $.trim($('#acompañadoPlato').val());
            precioPlato = $.trim($('#precioPlato').val());
            estado = $.trim($('#estado').val());
            
            Swal.fire({
               title: 'GUARDAR PLATO',
               html: `<p style="font-size: 1rem;">¿Deseas añadir un nuevo plato?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrillada del COCO',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, guardar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value == true) {
                  if (
                     categoria == '' ||
                     tipoPlato == '' ||
                     precioPlato == '' ||
                     estado == ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrillada del COCO',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/savePlato`,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                           categoria,
                           tipoPlato,
                           acompañadoPlato,
                           precioPlato,
                           estado
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrillada del COCO',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    listPlatos.ajax.reload(null, false);
                                    $("#modalProducts").modal("hide");
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const editPlato = (idPlato) => {
            dataCategoria();
            
            idPlato = $.trim(idPlato);

            Swal.fire({
               title: 'EDITAR PLATO',
               html: `<p style="font-size: 1rem;">¿Deseas editar este plato?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrillada del COCO',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, editar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idPlato === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrillada del COCO',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/searchPlato`,
                        type: 'GET',
                        dataType: 'json',
                        data: {
                           idPlato
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           //dataCategoria();

                           document.querySelector('.modalHeader').innerHTML = `
                                 <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                                    Editar Plato
                                 </h5>`;

                           document.querySelector('.modalFooter').innerHTML = `
                                 <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                                 <button type="button" class="btn__Send" onclick="updatePlato('${res.data._id}');">Actualizar</button>`;

                           $('#categoria').select2({
                              dropdownParent: $("#modalProducts"),
                              theme: "bootstrap",
                              placeholder: "Seleccionar...",
                              allowClear: true
                           });

                           $('#categoria').val(`${res.data._idCategoría}`).trigger('change');
                           $('#tipoPlato').val(`${res.data.nomPlato}`);
                           $('#acompañadoPlato').val(`${res.data.acompañado}`);
                           $('#precioPlato').val(`${res.data.precio}`);
                           $('#estado').val(`${res.data.estado}`).trigger('change');

                           $("#modalProducts").modal("show");

                           desbloqueointerface();
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const updatePlato = (idPlato) => {
            idPlato = $.trim(idPlato);
            categoria = $.trim($('#categoria').val());
            tipoPlato = $.trim($('#tipoPlato').val());
            acompañadoPlato = $.trim($('#acompañadoPlato').val());
            precioPlato = $.trim($('#precioPlato').val());
            estado = $.trim($('#estado').val());

            Swal.fire({
               title: 'ACTUALIZAR PLATO',
               html: `<p style="font-size: 1rem;">¿Deseas actualizar el plato?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrillada del COCO',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, actualizar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idPlato === '' ||
                     categoria === '' ||
                     tipoPlato === '' ||
                     precioPlato === '' ||
                     estado === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrillada del COCO',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/updatePlato`,
                        type: 'PUT',
                        dataType: 'json',
                        data: {
                           idPlato,
                           categoria,
                           tipoPlato,
                           acompañadoPlato,
                           precioPlato,
                           estado
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrillada del COCO',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    listPlatos.ajax.reload(null, false);
                                    $("#modalProducts").modal("hide");
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const deletePlato = (idPlato) => {
            idPlato = $.trim(idPlato);

            Swal.fire({
               title: 'ElIMINAR PLATO',
               html: `<p style="font-size: 1rem;">¿Deseas eliminar el plato?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrillada del COCO',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, eliminar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idPlato === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrillada del COCO',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/deletePlato`,
                        type: 'DELETE',
                        dataType: 'json',
                        data: {
                           idPlato
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrillada del COCO',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    listPlatos.ajax.reload(null, false);
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

      </script>