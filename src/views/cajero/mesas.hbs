      <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css" type="text/css">
      <link rel="stylesheet" href="/boxicons/boxicons.min.css" type="text/css">
      <link rel="stylesheet" href="/sweetalert2/sweetalert2.min.css" type="text/css">
      <link rel="stylesheet" href="/toastJS/jquery.toast.min.css" type="text/css">

      <link rel="stylesheet" href="/select2/select2.min.css" type="text/css">
      <link rel="stylesheet" href="/select2/select2-bootstrap.min.css" type="text/css">

      <link rel="stylesheet" href="/css/navbar.min.css" type="text/css">
      <link rel="stylesheet" href="/css/letra.min.css" type="text/css">
      <link rel="stylesheet" href="/css/products.min.css" type="text/css">
      <link rel="stylesheet" href="/css/desk.min.css" type="text/css">
      <link rel="stylesheet" href="/css/modal.min.css" type="text/css">

   </head>

	<body>
      {{> loader}}
      {{> navbarC}}

      <div class="contentView">
         <div class="container">
            <div class="row">
               <div class="col-md-12 text-center">
                  <div class="lettersTittle">
                     <span>M</span>
                     <span>E</span>
                     <span>S</span>
                     <span>A</span>
                     <span>S</span>
                  </div>
               </div>
            </div>

            <div class="row mb-4">
               <div class="col-md-12">
                  <button type="button" class="btnGeneral btnRModal" onclick="openModal();">
                     <i class='bx bx-add-to-queue bx-tada' ></i>
                     Separar
                  </button>
               </div>
            </div>

            <div class="row" id="allMesas">
               {{!-- All Mesas --}}
               
            </div>

         </div>
      </div>

      <br>

      <script src="/JQuery/jquery.min.js"></script>
      <script src="/js/popper.min.js"></script>
      <script src="/bootstrap/js/bootstrap.min.js"></script>
      <script src="/sweetalert2/sweetalert2.min.js"></script>
      <script src="/imaskJS/imask.min.js"></script>
      <script src="/toastJS/jquery.toast.min.js"></script>

      <script src="/select2/select2.min.js"></script>

      <script src="/js/navbar.min.js"></script>

      {{!-- Modal Mesa --}}
      <div class="modal fade" id="modalMesa" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
         <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
               <div class="modal-header modalHeader">
                  {{!-- Header del Modal --}}
               </div>

               <div class="modal-body body__modal" style="padding: 0 1rem; !important">
                  <div class="row mt-3 mb-3">
                     <div class="form-group col-md-12">
                        <label for="" class="required"># de Mesa</label>
                        <input type="text" class="form-control" id="numMesa" name="numMesa" placeholder="Ingrese el numero de mesa: Ej. 5" >
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Estado</label>
                        <select class="form-control" id="estado" name="estado">
                           <option class="opt" value="" selected disabled>Seleccionar...</option>
                           <option value="Reservada">Reservar</option>
                           <option value="Ocupada">Ocupar</option>
                        </select>
                     </div>
                     
                  </div>
                  
               </div>

               <div class="modal-footer modalFooter">
                  {{!-- Footer del Modal --}}
               </div>
               
            </div>
         </div>
      </div>

      {{!-- Modal Ventas --}}
      <div class="modal fade" id="modalVentas" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
         <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
               <div class="modal-header modalHeader">
                  <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                     Lista de Ventas
                  </h5>
               </div>

               <div class="modal-body body__modal" style="padding: 0 2rem; !important">
                  <div class="row">
                     <div class="col-md-4 mb-3 marginCua">
                        <div class="row mt-2">
                           <div class="form-group col-md-12 mb-3">
                              <label for="" class="required">Platos</label>
                              <select style="width: 100%" class="form-control" id="platos" name="platos" >
                                 {{!-- Data --}}
                              </select>
                           </div>

                           {{!-- <div class="form-group col-md-12 mb-3">
                              <label for="" class="required">Tipo</label>
                              <input type="text" class="form-control" id="tipoPlato" name="tipoPlato" placeholder="Ingrese el tipo de presa: Ej. Pollo" disabled >
                           </div> --}}
                           
                           <input type="hidden" class="form-control" id="IDPlato" name="IDPlato" disabled >

                           <div class="form-group col-md-12 mb-3">
                              <label for="" class="">Acompañado con</label>
                              <textarea class="form-control textarea" name="acompañadoPlato" id="acompañadoPlato" placeholder="Escribir el nombre del plato principal..." disabled ></textarea>
                           </div>

                           <div class="form-group col-md-12 mb-3">
                              <label for="" class="required">Precio</label>
                              <input type="text" class="form-control" id="precioPlato" name="precioPlato" placeholder="Precio del plato: Ej. 4,50" disabled >
                           </div>

                           <div class="form-group col-md-12 mb-3">
                              <label for="" class="required">Cantidad</label>
                              <input type="text" class="form-control" id="cantidadPlato" name="cantidadPlato" placeholder="Cantidad plato a llevar" required >
                           </div>

                           <div class="form-group col-md-12 mb-3 modalFooter footerVentas">
                              <div></div>
                              <div></div>
                           </div>
                        </div>
                     </div>

                     <div class="col-md-7 mb-3 mt-4 mx-auto marginCua">
                        <div class="row">
                           <div class="table-responsive">
                              <table class="table table-sm table-striped table-bordered">
                                 {{!-- <caption>List of users</caption> --}}
                                 <thead class="cabeceraItems table-success">
                                    <tr>
                                       <th nowrap scope="col">#</th>
                                       <th nowrap scope="col">Plato</th>
                                       <th nowrap scope="col">Cantidad</th>
                                       <th nowrap scope="col">P. Unitario</th>
                                       <th nowrap scope="col">P. Parcial</th>
                                       <th nowrap scope="col">
                                          Acciones
                                       </th>
                                    </tr>
                                 </thead>

                                 <tbody class="table-group-divider table-group-divider addItems">
                                 </tbody>

                                 <tfoot class="cabeceraItems">
                                    <tr>
                                       <th colspan="4" class="right">TOTAL A PAGAR</th>
                                       <th class="pagoFin rigth">$180</th>
                                       <th></th>
                                    </tr>
                                 </tfoot>
                              </table>
                           </div>
                        </div>
                     </div>
                  </div>
                  
               </div>

               <div class="modal-footer modalFooter">
                  <div></div>
                  <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
               </div>
               
            </div>
         </div>
      </div>

      {{!-- Modal Edit Items --}}
      <div class="modal fade" id="modalItems" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
         <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
               <div class="modal-header modalHeader modalHEdit">
                  {{!-- Header del Modal --}}
               </div>

               <div class="modal-body body__modal" style="padding: 0 1rem; !important">
                  <div class="row mt-3 mb-3">
                     <div class="form-group col-md-12">
                        <label for="" class="required">Pedido</label>
                        <input type="text" class="form-control" id="nomPedido" name="nomPedido" placeholder="Pedido del cliente" disabled />
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Cantidad</label>
                        <input type="text" class="form-control" id="cantidadEdit" name="cantidadEdit" placeholder="Ingrese la cantidad: Ej. 5" >
                     </div>
                     
                  </div>
                  
               </div>

               <div class="modal-footer modalFooter modalFEdit">
                  {{!-- Footer del Modal --}}
               </div>
               
            </div>
         </div>
      </div>

      {{!-- Modal Invoce --}}
      <div class="modal fade" id="modalInvoce" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
         <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
               <div class="modal-header modalHeader modalHI">
                  {{!-- Header del Modal --}}
               </div>

               <div class="modal-body body__modal" style="padding: 0 1rem; !important">
                  <div class="row mt-3 mb-3">
                     <div class="form-group col-md-12">
                        <label for="" class="required"># de Cédula</label>
                        <input type="text" class="form-control" id="cedulaCliente" name="cedulaCliente" placeholder="Ingrese la cédula del cliente" >
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Nombres Completos</label>
                        <input type="text" class="form-control" id="nameCliente" name="nameCliente" placeholder="Ingrese la cédula del cliente" >
                     </div>

                     <div class="form-group col-md-12">
                        <label for="" class="required">Correo Electrónico</label>
                        <input type="email" class="form-control" id="emailCliente" name="emailCliente" placeholder="Ingrese la cédula del cliente" >
                     </div>
                     
                  </div>
                  
               </div>

               <div class="modal-footer modalFooter modalFI">
                  {{!-- Footer del Modal --}}
               </div>
               
            </div>
         </div>
      </div>

      <script src="/js/validationsFront.min.js"></script>

      <script>
         {{> notifications}}

         let arrayPlatos = [];

         $(document).ready(function() {
            allDesk();
         });

         const allDesk = () => {
            bloqueointerface();
            
            $.ajax({
               url: "/c/allMesas",
               type: "GET",
               datatype: "json",
            })
            .done(function(res) {
               document.getElementById('allMesas').innerHTML = ``;

               if(res.length > 0) {
                  res.forEach(data => {
                     document.getElementById('allMesas').innerHTML += `
                           <div class="col-md-4 mb-3">
                              <section class="card">
                                 <div class="icon">
                                    <img src="/img/desk.png" alt="Shop here.">
                                 </div>

                                 <div class="tittle_card">
                                    Mesa #${data.numMesa} <br>

                                    ${data.estado === 'Ocupada' ? '<span class="badgeCard mode badge badge-pill badge-danger">Ocupada</span>' : '<span class="badgeCard mode badge badge-pill badge-success">Reservada</span>'}
                                 </div>

                                 <div class="code">
                                    ${data.codigo}
                                 </div>
                                 
                                 <div class="btnS">
                                    <button type="button" class="btnS__all edit" onclick="editMesa('${data._id}', '${data.numMesa}', '${data.estado}');">
                                       <i class='bx bx-edit-alt' ></i>
                                    </button>
                                    <button type="button" class="btnS__all delete" onclick="deleteMesa('${data._id}', '${data.numMesa}');">
                                       <i class='bx bx-trash' ></i>
                                    </button>
                                    <button type="button" class="btnS__all list" onclick="openModalVentas('${data.codigo}');">
                                       <i class='bx bx-file-find' ></i>
                                    </button>
                                    <button type="button" class="btnS__all pdf" onclick="modalInvoce('${data._id}', '${data.codigo}', '${data.numMesa}');">
                                       <i class='bx bxs-file-pdf' ></i>
                                    </button>
                                 </div>
                              </section>
                           </div>
                        `;
                  });
               } else {
                  document.getElementById('allMesas').innerHTML += `
                        <div class="col-md-5 mx-auto">
                           <div class="alert alert-danger alert-dismissible fade show" role="alert">
                              <strong>Aviso</strong>
                              <p style="text-align: left; font-size: 0.8em; color: #333;">No existen mesas ocupadas o separadas en el momento.</p>
                        </div>
                     `;
               }

               desbloqueointerface();
            })
            .fail(function() {
               console.log("Error");
            });
         }

         const openModal = () => {
            document.querySelector('.modalHeader').innerHTML = `
                  <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                     Nueva Mesa
                  </h5>`;

            document.querySelector('.modalFooter').innerHTML = `
                  <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                  <button type="button" class="btn__Send" onclick="saveMesa();">Guardar</button>`;
            
            $('#numMesa').val('');
            $('#estado').val('').trigger('change');

            $("#modalMesa").modal("show");
         }

         const saveMesa = () => {
            numMesa = $.trim($('#numMesa').val());
            estado = $.trim($('#estado').val());
            
            Swal.fire({
               title: 'SEPARAR O AGENDAR MESA',
               html: `<p style="font-size: 1rem;">¿Deseas generar y guardar la <b>Mesa #${numMesa}</b>?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrilladas COCON',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, guardar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value == true) {
                  if (
                     numMesa == '' ||
                     estado == ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrilladas COCON',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/saveMesa`,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                           numMesa,
                           estado
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    allDesk();
                                    $("#modalMesa").modal("hide");
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         } 

         const deleteMesa = (id, numMesa) => {
            idMesa = $.trim(id);
            numMesa = $.trim(numMesa);

            Swal.fire({
               title: `ElIMINAR MESA #${numMesa}`,
               html: `<p style="font-size: 1rem;">¿Deseas eliminar la <b>Mesa #${numMesa}</b>? Recuerda que para eliminar una mesa no debe de tener un proceso de compra en ejecución. Y recuerda que este proceso es irreversible.</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrilladas COCON',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, eliminar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idMesa === '' ||
                     numMesa === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrilladas COCON',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/deleteMesa`,
                        type: 'DELETE',
                        dataType: 'json',
                        data: {
                           idMesa,
                           numMesa
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    allDesk();
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const editMesa = (id, numMesa, estMesa) => {
            idMesa = $.trim(id);
            numMesa = $.trim(numMesa);
            estMesa = $.trim(estMesa);

            Swal.fire({
               title: `EDITAR MESA #${numMesa}`,
               html: `<p style="font-size: 1rem;">¿Deseas editar la <b>Mesa #${numMesa}</b>?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrilladas COCON',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, editar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idMesa === '' ||
                     numMesa === '' ||
                     estMesa === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrilladas COCON',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     document.querySelector('.modalHeader').innerHTML = `
                           <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                              Editar Mesa
                           </h5>`;

                     document.querySelector('.modalFooter').innerHTML = `
                           <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                           <button type="button" class="btn__Send" onclick="updateMesa('${idMesa}', '${numMesa}');">Actualizar</button>`;
                     
                     $('#numMesa').val(`${numMesa}`);
                     $('#estado').val(`${estMesa}`).trigger('change');

                     $("#modalMesa").modal("show");

                     desbloqueointerface();

                  }
               }
            })
         }

         const updateMesa = (id, numero) => {
            idMesa = $.trim(id);
            numero = $.trim(numero);
            numMesa = $.trim($('#numMesa').val());
            estado = $.trim($('#estado').val());

            Swal.fire({
               title: `ACTUALIZAR MESA #${numero}`,
               html: `<p style="font-size: 1rem;">¿Deseas actualizar la <b>Mesa #${numero}</b> a la <b>Mesa #${numMesa}</b>? Recuerda que para editar una mesa no debe de tener un proceso de compra en ejecución y peor aún ocupar una que ya ha sido reservada o esté ocupada.</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrilladas COCON',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, actualizar!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value === true) {
                  if (
                     idMesa === '' ||
                     numMesa === '' ||
                     estado === ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrilladas COCON',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/updateMesa`,
                        type: 'PUT',
                        dataType: 'json',
                        data: {
                           idMesa,
                           numMesa,
                           estado
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    allDesk();
                                    $("#modalMesa").modal("hide");
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const dataPlatos = () => {
            $.ajax({
               url: "/c/allPlatosList",
               type: "GET",
               datatype: "json",
            })
            .done(function(res) {
               document.getElementById('platos').innerHTML = `<option></option>`;

               if(res.length > 0) {
                  res.forEach(data => {
                     document.getElementById('platos').innerHTML += `
                           <option value="${data._id}">
                              ${data._idCategoría.nomCategoria} +
                              ${data.nomPlato}
                           </option>
                        `;

                     arrayPlatos.push({
                        id: data._id,
                        nameCategoria: data._idCategoría.nomCategoria,
                        nomPlato: data.nomPlato,
                        acompañado: data.acompañado,
                        precio: data.precio,
                     })
                  });
               }
            })
            .fail(function() {
               console.log("Error");
            });
         }

         const openModalVentas = (codeMesa) => {
            bloqueointerface();

            dataPlatos();
            $('#platos').select2({
               dropdownParent: $("#modalVentas"),
               theme: "bootstrap",
               placeholder: "Seleccionar...",
               allowClear: true
            });

            $('#acompañadoPlato').val('');
            $('#precioPlato').val('');
            $('#cantidadPlato').val('');

            document.querySelector('.footerVentas').innerHTML = `
                  <div></div>
                  <button type="button" class="btn__Send" onclick="venderPlato('${codeMesa}');">Vender</button>`;

            allSales(codeMesa);

            $('#modalVentas').modal('show');
            desbloqueointerface();
         }
         
         $('#platos').change(function() {
            const found = arrayPlatos.find(element => element.id === `${$(this).val()}`);
            
            $('#IDPlato').val(`${found.id}`);
            $('#acompañadoPlato').val(`${found.acompañado}`);
            $('#precioPlato').val(`${found.precio}`);
         })

         const venderPlato = (codeMesa) => {
            codeMesa = $.trim(codeMesa);
            IDPlato = $.trim($('#IDPlato').val());
            cantidadPlato = $.trim($('#cantidadPlato').val());

            Swal.fire({
               title: 'NUEVA VENTA',
               html: `<p style="font-size: 1rem;">¿Deseas añadir el item a la factura?</p>`,
               imageUrl: '/img/parilladaCOCON.png',
               imageWidth: 250,
               imageHeight: 140,
               imageAlt: 'Parrilladas COCON',
               showCancelButton: true,
               confirmButtonColor: '#049947',
               cancelButtonColor: '#f34943',
               confirmButtonText: 'Sí, vender!',
               cancelButtonText: 'No, cancelar!',
               reverseButtons: true,
               focusConfirm: false,
               focusCancel: true,
               allowOutsideClick: false
            }).then((result) => {
               if (result.value == true) {
                  if (
                     codeMesa == '' ||
                     IDPlato == '' ||
                     cantidadPlato == ''
                  ) {
                     Swal.fire({
                        position: 'top-end',
                        imageUrl: '/img/parilladaCOCON.png',
                        imageWidth: 250,
                        imageHeight: 140,
                        imageAlt: 'Parrilladas COCON',
                        title: 'CAMPOS VACÍOS',
                        html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                        showConfirmButton: false,
                        timer: 1500
                     })
                  } else {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/saveItem`,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                           codeMesa,
                           IDPlato,
                           cantidadPlato
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    bloqueointerface();
                                    allSales(codeMesa);

                                    dataPlatos();
                                    $('#platos').select2({
                                       dropdownParent: $("#modalVentas"),
                                       theme: "bootstrap",
                                       placeholder: "Seleccionar...",
                                       allowClear: true
                                    });
                                    
                                    $('#IDPlato').val('');
                                    $('#acompañadoPlato').val('');
                                    $('#precioPlato').val('');
                                    $('#cantidadPlato').val('');
                                    
                                    desbloqueointerface();
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               }
            })
         }

         const allSales = (codeMesa) => {
            $.ajax({
               url: "/c/allSales",
               type: "GET",
               datatype: "json",
               data: {
                  codeMesa
               }
            })
            .done(function(res) {
               document.querySelector('.addItems').innerHTML = ``;

               if(res !== '') {
                  let num = 0, totPagar = 0;
                  res.ventas.forEach(data => {
                     document.querySelector('.addItems').innerHTML += `
                           <tr>
                              <th nowrap class="center bold">${++num}</th>
                              <th class="left">${data.plato}</th>
                              <th nowrap >${data.cantidad}</th>
                              <th nowrap >${data.precioUnit}</th>
                              <th nowrap >${parseFloat(data.precioPar).toFixed(2)}</th>
                              <th nowrap class="center">
                                 <div class="btnSG">
                                    <button type="button" class="btnS__all edit" onclick="openModalEdit('${data._id}', '${data.plato}', '${res._id}', '${codeMesa}', ${data.cantidad});">
                                       <i class='bx bx-edit-alt' ></i>
                                    </button>
                                    <button type="button" class="btnS__all delete" onclick="deleteItem('${data._id}', '${num}', '${res._id}', '${codeMesa}');">
                                       <i class='bx bx-trash' ></i>
                                    </button>
                                 </div>
                              </th>
                           </tr>
                        `;

                     totPagar += parseFloat(data.precioPar);
                  });

                  document.querySelector('.pagoFin').innerHTML = `
                        ${parseFloat(totPagar).toFixed(2)}
                     `;
               } else {
                  document.querySelector('.addItems').innerHTML = `
                        <tr>
                           <th colspan="6" class="center">
                              No tiene productos comprados
                           </th>
                        </tr>
                     `;
                  
                  document.querySelector('.pagoFin').innerHTML = `
                        0,00
                     `;
               }
            })
            .fail(function() {
               console.log("Error");
            });
         }

         const deleteItem = (idItem, num, idSale, codeMesa) => {
            idItem = $.trim(idItem);
            num = $.trim(num);
            idSale = $.trim(idSale);
            codeMesa = $.trim(codeMesa);

            if (
               idItem === '' ||
               num === '' ||
               idSale === '' ||
               codeMesa === ''
            ) {
               Swal.fire({
                  position: 'top-end',
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  title: 'CAMPOS VACÍOS',
                  html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                  showConfirmButton: false,
                  timer: 1500
               })
            } else {
               Swal.fire({
                  title: `ElIMINAR ITEM #${num}`,
                  html: `<p style="font-size: 1rem;">¿Deseas eliminar el <b>Item #${num}</b>? Este proceso es irreversible.</p>`,
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  showCancelButton: true,
                  confirmButtonColor: '#049947',
                  cancelButtonColor: '#f34943',
                  confirmButtonText: 'Sí, eliminar!',
                  cancelButtonText: 'No, cancelar!',
                  reverseButtons: true,
                  focusConfirm: false,
                  focusCancel: true,
                  allowOutsideClick: false
               }).then((result) => {
                  if (result.value === true) {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/deleteItem`,
                        type: 'DELETE',
                        dataType: 'json',
                        data: {
                           idItem,
                           idSale
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    allSales(codeMesa);
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               })
            }
         }

         const openModalEdit = (idItem, plato, idSale, codeMesa, cantidad) => {
            console.log(idSale);
            console.log(codeMesa);
            console.log(idItem);

            document.querySelector('.modalHEdit').innerHTML = `
                  <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                     Editar Item
                  </h5>`;

            document.querySelector('.modalFEdit').innerHTML = `
                  <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                  <button type="button" class="btn__Send" onclick="updateItemCantidad('${idSale}', '${codeMesa}', '${idItem}');">Actualizar</button>`;
            
            $('#nomPedido').val(`${plato}`);
            $('#cantidadEdit').val(`${cantidad}`);

            $("#modalItems").modal("show");
         }

         const updateItemCantidad = (idSale, codeMesa, idItem) => {
            idSale = $.trim(idSale);
            codeMesa = $.trim(codeMesa);
            idItem = $.trim(idItem);
            nomPedido = $.trim($('#nomPedido').val());
            cantidadEdit = $.trim($('#cantidadEdit').val());

            if (
               idSale === '' ||
               codeMesa === '' ||
               idItem === '' ||
               nomPedido === '' ||
               cantidadEdit === ''
            ) {
               Swal.fire({
                  position: 'top-end',
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  title: 'CAMPOS VACÍOS',
                  html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                  showConfirmButton: false,
                  timer: 1500
               })
            } else {
               Swal.fire({
                  title: `ACTUALIZAR CANTIDAD`,
                  html: `<p style="font-size: 1rem;">¿Deseas actualizar el ítem <b>${nomPedido}</b> con la cantidad <b>${cantidadEdit}</b>?</p>`,
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  showCancelButton: true,
                  confirmButtonColor: '#049947',
                  cancelButtonColor: '#f34943',
                  confirmButtonText: 'Sí, actualizar!',
                  cancelButtonText: 'No, cancelar!',
                  reverseButtons: true,
                  focusConfirm: false,
                  focusCancel: true,
                  allowOutsideClick: false
               }).then((result) => {
                  if (result.value === true) {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/updateItem`,
                        type: 'PUT',
                        dataType: 'json',
                        data: {
                           idSale,
                           codeMesa,
                           idItem,
                           cantidadEdit
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    allSales(codeMesa);
                                    $("#modalItems").modal("hide");
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               })
            }
         }

         const modalInvoce = (id, codeMesa, numMesa) => {
            document.querySelector('.modalHI').innerHTML = `
                  <h5 class="modal-title tittle__modal" id="staticBackdropLabel">
                     Generar Factura
                  </h5>`;

            document.querySelector('.modalFI').innerHTML = `
                  <button type="button" class="btn__Close" data-dismiss="modal">Cerrar</button>
                  <button type="button" class="btn__Send" onclick="generateInvoice('${id}', '${codeMesa}', '${numMesa}');">Generar</button>`;
            
            $('#cedulaCliente').val('');
            $('#nameCliente').val('');
            $('#emailCliente').val('');

            $("#modalInvoce").modal("show");
         }

         const generateInvoice = (id, codeMesa, numMesa) => {
            id = $.trim(id);
            codeMesa = $.trim(codeMesa);
            numMesa = $.trim(numMesa);
            cedulaCliente = $.trim($('#cedulaCliente').val());
            nameCliente = $.trim($('#nameCliente').val());
            emailCliente = $.trim($('#emailCliente').val());

            if (
               id === '' ||
               codeMesa === '' ||
               numMesa === '' ||
               cedulaCliente === '' ||
               nameCliente === '' ||
               emailCliente === ''
            ) {
               Swal.fire({
                  position: 'top-end',
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  title: 'CAMPOS VACÍOS',
                  html: `<p style="font-size: 1rem;">Los campos no pueden ir vacíos o con espacios.</p>`,
                  showConfirmButton: false,
                  timer: 1500
               })
            } else {
               Swal.fire({
                  title: 'GENERAR FACTURA',
                  html: `<p style="font-size: 1rem;">¿Deseas generar la factura de la <b>Mesa #${numMesa}</b>? Al aceptar das consentimento a terminar la venta.</p>`,
                  imageUrl: '/img/parilladaCOCON.png',
                  imageWidth: 250,
                  imageHeight: 140,
                  imageAlt: 'Parrilladas COCON',
                  showCancelButton: true,
                  confirmButtonColor: '#049947',
                  cancelButtonColor: '#f34943',
                  confirmButtonText: 'Sí, generar!',
                  cancelButtonText: 'No, cancelar!',
                  reverseButtons: true,
                  focusConfirm: false,
                  focusCancel: true,
                  allowOutsideClick: false
               }).then((result) => {
                  if (result.value == true) {
                     bloqueointerface();

                     $.ajax({
                        url: `/c/generateInvoce`,
                        type: 'GET',
                        dataType: 'json',
                        data: {
                           id,
                           codeMesa,
                           numMesa,
                           cedulaCliente,
                           nameCliente,
                           emailCliente,
                        }
                     })
                     .done(function(res) {
                        if (res.res == 'true') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              imageUrl: '/img/parilladaCOCON.png',
                              imageWidth: 250,
                              imageHeight: 140,
                              imageAlt: 'Parrilladas COCON',
                              confirmButtonColor: '#049947',
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    bloqueointerface();
                                    allDesk();
                                    window.open(`/c/pdf/${res.filename}`,"ventana1","height=750,width=1250,location=no,toolbar=no,menubar=no,scrollbars=no");
                                    $("#modalInvoce").modal("hide");
                                    desbloqueointerface();
                                 }
                              }
                           })
                        }

                        if (res.res == 'false') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'error') {
                           desbloqueointerface();
                           
                           Swal.fire({
                              title: res.tittle,
                              html: '<p style="font-size: 1rem;">'+res.description+'</p>',
                              icon: res.icon,
                              allowOutsideClick: false
                           }).then((result) => {
                              if (result.value == true) {
                                 if (res.res == 'true') {
                                    location.reload();
                                 }
                              }
                           })
                        }

                        if (res.res == 'toast') {
                           desbloqueointerface();
                           
                           const toastList = res.toast;

                           toastList.forEach(toastDes => {
                              $(document).ready(function() {
                                 $.toast({
                                    position: 'top-right',
                                    heading: `${toastDes.tittle}`,
                                    text: `${toastDes.description}`,
                                    icon: `${toastDes.icon}`,
                                    showHideTransition: 'plain',
                                    hideAfter: 5000
                                 })
                              })
                           });
                        }
                     })
                     .fail(function() {
                        desbloqueointerface();
                        console.log("Error");
                     });
                  }
               })
            }
         }
         
      </script>